{
    "name": "clarion-extensions",
    "displayName": "Clarion Extensions",
    "description": "Extension for Clarion Language",
    "version": "0.5.7",
    "publisher": "msarson",
    "repository": {
        "type": "git",
        "url": "https://github.com/msarson/Clarion-Extension"
    },
    "bugs": {
        "url": "https://github.com/msarson/Clarion-Extension/issues"
    },
    "galleryBanner": {
        "color": "#474747",
        "theme": "dark"
    },
    "engines": {
        "vscode": "^1.97.0"
    },
    "activationEvents": [
        "onLanguage:clarion",
        "onStartupFinished"
    ],
    "main": "./out/client/src/extension.js",
    "icon": "images/sv57x57.png",
    "license": "MIT",
    "categories": [
        "Snippets",
        "Programming Languages"
    ],
    "keywords": [
        "clarion",
        "json"
    ],
    "extensionDependencies": [
        "fushnisoft.clarion"
    ],
    "contributes": {
        "submenus": [
            {
                "id": "clarion.solutionMenu",
                "label": "Solution"
            }
        ],
        "problemMatchers": [
            {
                "name": "clarionBuildMatcher",
                "owner": "clarion",
                "fileLocation": [
                    "absolute"
                ],
                "pattern": [
                    {
                        "regexp": "^\\s*\\d*>?\\s*(.+\\.clw)\\((\\d+),(\\d+)\\):\\s+(error|warning)\\s*:\\s*(.*)\\s+\\[.*\\]$",
                        "file": 1,
                        "line": 2,
                        "column": 3,
                        "severity": 4,
                        "message": 5
                    },
                    {
                        "regexp": "^\\s*(?:MSBUILD|.*)\\s*:\\s+(error|warning)\\s+([A-Z0-9]+):\\s+(.+)\\s+\\[(.+)\\]$",
                        "severity": 1,
                        "code": 2,
                        "message": 3,
                        "file": 4
                    },
                    {
                        "regexp": "^\\s*\\d*>?\\s*(.+)\\((\\d+)\\):\\s+Solution file error\\s+([A-Z0-9]+):\\s+(.+)$",
                        "file": 1,
                        "line": 2,
                        "code": 3,
                        "severity": 1,
                        "message": 4
                    }
                ]
            }
        ],
        "keybindings": [
            {
                "command": "clarion.followLink",
                "key": "ctrl+f12",
                "when": "editorTextFocus"
            },
            {
                "command": "clarion.quickOpen",
                "key": "ctrl+p",
                "when": "clarion.solutionOpen && editorTextFocus"
            },
            {
                "command": "clarion.buildSolution",
                "key": "ctrl+shift+b",
                "when": "clarion.solutionOpen"
            }
        ],
        "viewsContainers": {
            "activitybar": [
                {
                    "id": "clarionViews",
                    "title": "Clarion Tools",
                    "icon": "images/sv57x57.png"
                }
            ]
        },
        "views": {
            "clarionViews": [
                {
                    "id": "solutionView",
                    "name": "Solution View",
                    "icon": "images/sv57x57.png"
                },
                {
                    "id": "clarionStructureView",
                    "name": "Structure",
                    "icon": "symbol-structure"
                }
            ]
        },
        "commands": [
            
            {
                "command": "clarion.buildSolution",
                "title": "Build Clarion Solution",
                "key": "ctrl+shift+b",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.followLink",
                "title": "Clarion: Follow Link",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.openSolution",
                "title": "Open Solution",
                "icon": "$(folder-opened)"
            },
            {
                "command": "clarion.openSolutionFromList",
                "title": "Open Solution List",
                "icon": "$(list-selection)"
            },
            {
                "command": "clarion.openSolutionMenu",
                "title": "Open Solution...",
                "icon": "$(folder-opened)"
            },
            {
                "command": "clarion.closeSolution",
                "title": "Close Solution",
                "when": "clarion.solutionOpen",
                "icon": "$(close)"
            },
            {
                "command": "clarion.quickOpen",
                "title": "Clarion: Quick Open (Includes Redirection Paths)",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.setConfiguration",
                "title": "Clarion: Set Configuration",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.buildProject",
                "title": "Build Project"
            },
            {
                "command": "clarion.reinitializeSolution",
                "title": "Clarion: Reinitialize Solution",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.navigateToProject",
                "title": "Navigate to Project",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.addSourceFile",
                "title": "Add Source File",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.removeSourceFile",
                "title": "Remove Source File",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.structureView.expandAll",
                "title": "Expand All",
                "icon": "$(expand-all)"
            },
            {
                "command": "clarion.structureView.filter",
                "title": "Filter Structure View",
                "icon": "$(filter)"
            },
            {
                "command": "clarion.structureView.clearFilter",
                "title": "Clear Structure Filter",
                "icon": "$(clear-all)"
            },
            {
                "command": "clarion.solutionView.filter",
                "title": "Filter Solution Tree",
                "icon": "$(filter)",
                "when": "clarion.solutionOpen"
            },
            {
                "command": "clarion.solutionView.clearFilter",
                "title": "Clear Filter",
                "icon": "$(clear-all)",
                "when": "clarion.solutionOpen"
            }
        ],
        "menus": {
            "view/item/context": [
                {
                    "command": "clarion.buildSolution",
                    "when": "view == solutionView && viewItem == clarionSolution",
                    "group": "build"
                },
                {
                    "command": "clarion.buildSolution",
                    "when": "view == solutionView && viewItem == clarionProject",
                    "group": "build"
                },
                {
                    "command": "clarion.buildSolution",
                    "when": "view == solutionView && viewItem == clarionFile",
                    "group": "build"
                },
                {
                    "command": "clarion.buildProject",
                    "when": "view == solutionView && viewItem == clarionProject",
                    "group": "build"
                },
                {
                    "command": "clarion.buildProject",
                    "when": "view == solutionView && viewItem == clarionFile",
                    "group": "build"
                },
                {
                    "command": "clarion.closeSolution",
                    "when": "view == solutionView && viewItem == clarionSolution",
                    "group": "navigation"
                },
                {
                    "command": "clarion.addSourceFile",
                    "when": "view == solutionView && viewItem == clarionProject",
                    "group": "1_modification"
                },
                {
                    "command": "clarion.removeSourceFile",
                    "when": "view == solutionView && viewItem == clarionFile",
                    "group": "1_modification"
                }
            ],
            "commandPalette": [
                {
                    "command": "clarion.addSourceFile",
                    "when": "false"
                },
                {
                    "command": "clarion.removeSourceFile",
                    "when": "false"
                },
                {
                    "command": "clarion.openSolutionFromList",
                    "when": "true"
                },
                {
                    "command": "clarion.openSolutionMenu",
                    "when": "false"
                }
            ],
            "view/title": [
                {
                    "command": "clarion.openSolution",
                    "when": "view == solutionView && !clarion.solutionOpen",
                    "group": "navigation@1"
                },
                {
                    "command": "clarion.closeSolution",
                    "when": "view == solutionView && clarion.solutionOpen",
                    "group": "navigation@1"
                },
                {
                    "command": "clarion.openSolutionFromList",
                    "when": "view == solutionView",
                    "group": "navigation@2"
                },
                {
                    "command": "clarion.solutionView.filter",
                    "when": "view == solutionView && clarion.solutionOpen",
                    "group": "navigation@3"
                },
                {
                    "command": "clarion.solutionView.clearFilter",
                    "when": "view == solutionView && clarion.solutionOpen",
                    "group": "navigation@4"
                },
                {
                    "command": "clarion.structureView.expandAll",
                    "title": "Expand All",
                    "icon": "$(expand-all)",
                    "when": "view == clarionStructureView && clarionStructureViewVisible",
                    "group": "navigation@1"
                },
                {
                    "command": "clarion.structureView.filter",
                    "title": "Filter Structure View",
                    "icon": "$(filter)",
                    "when": "view == clarionStructureView && clarionStructureViewVisible",
                    "group": "navigation@2"
                },
                {
                    "command": "clarion.structureView.clearFilter",
                    "title": "Clear Filter",
                    "icon": "$(clear-all)",
                    "when": "view == clarionStructureView && clarionStructureViewVisible",
                    "group": "navigation@3"
                }
            ],
            "viewContainer/context": [
                {
                    "submenu": "clarion.solutionMenu",
                    "when": "viewContainer == clarionViews",
                    "group": "navigation@1"
                }
            ],
            "clarion.solutionMenu": [
                {
                    "command": "clarion.openSolution",
                    "group": "navigation@1"
                },
                {
                    "command": "clarion.openSolutionFromList",
                    "group": "navigation@2"
                }
            ]
        },
        "viewsWelcome": [
            {
                "view": "solutionView",
                "contents": "No solution is currently open.\n[Open Solution](command:clarion.openSolution)\n[Open Solution from List](command:clarion.openSolutionFromList)\n[Getting Started](https://github.com/msarson/Clarion-Extension/blob/master/GettingStarted.md) | [Report an Issue](https://github.com/msarson/Clarion-Extension/issues)",
                "when": "!clarion.solutionOpen"
            }
        ],
        "snippets": [
            {
                "language": "clarion",
                "path": "./snippets/variables.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/refvariables.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/classes.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/procedures.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/procedurevars.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/procedurerefvars.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/statements.json"
            },
            {
                "language": "jsonc",
                "path": "./snippets/clarionbuildtask.json"
            },
            {
                "language": "clarion",
                "path": "./snippets/override.json"
            }
        ],
        "configuration": {
            "type": "object",
            "title": "Clarion Extension Configuration",
            "properties": {
                "clarion.fileSearchExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".clw",
                        ".inc",
                        ".equ",
                        ".eq"
                    ],
                    "description": "Defines the file extensions used for searching files in Quick Open (Ctrl+P)."
                },
                "clarion.defaultLookupExtensions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "default": [
                        ".clw",
                        ".inc",
                        ".equ",
                        ".eq"
                    ],
                    "description": "Defines the file extensions used for document linking and hover previews when a file is not part of a project."
                },
                "clarion.solutionFile": {
                    "type": "string",
                    "default": "",
                    "description": "Path to the Clarion solution (.sln) file."
                },
                "clarion.propertiesFile": {
                    "type": "string",
                    "default": "",
                    "description": "Path to the ClarionProperties.xml file."
                },
                "clarion.version": {
                    "type": "string",
                    "default": "",
                    "description": "Selected Clarion version."
                },
                "clarion.configuration": {
                    "type": "string",
                    "default": "",
                    "description": "Selected Clarion configuration."
                },
                "clarion.currentSolution": {
                    "type": "string",
                    "default": "",
                    "description": "Path to the currently selected Clarion solution file."
                },
                "clarion.solutions": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "solutionFile": {
                                "type": "string",
                                "description": "Path to the Clarion solution (.sln) file."
                            },
                            "propertiesFile": {
                                "type": "string",
                                "description": "Path to the ClarionProperties.xml file."
                            },
                            "version": {
                                "type": "string",
                                "description": "Selected Clarion version."
                            },
                            "configuration": {
                                "type": "string",
                                "description": "Selected Clarion configuration."
                            }
                        }
                    },
                    "default": [],
                    "description": "Array of Clarion solution settings."
                },
                "clarion.maxNumberOfProblems": {
                    "scope": "resource",
                    "type": "number",
                    "default": 100,
                    "description": "Controls the maximum number of problems produced by the server."
                },
                "clarion.trace.server": {
                    "scope": "window",
                    "type": "string",
                    "enum": [
                        "off",
                        "messages",
                        "verbose"
                    ],
                    "default": "off",
                    "description": "Traces the communication between VS Code and the language server."
                },
                "clarion-extensions.spacing.className": {
                    "scope": "window",
                    "type": "number",
                    "default": 4,
                    "description": "Spacing between ClassName and CLASS in snippets."
                },
                "clarion-extensions.spacing.methodName": {
                    "scope": "window",
                    "type": "number",
                    "default": 2,
                    "description": "Spacing between MethodName and PROCEDURE in snippets."
                },
                "clarion.highlighting": {
                    "type": "object",
                    "description": "Highlighting settings for Clarion code elements",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "default": true,
                            "description": "Enable or disable all highlighting features"
                        },
                        "prefix": {
                            "type": "object",
                            "properties": {
                                "patterns": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "format": "color",
                                                "description": "Simple color value"
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "color": {
                                                        "type": "string",
                                                        "format": "color",
                                                        "description": "Text color"
                                                    },
                                                    "backgroundColor": {
                                                        "type": "string",
                                                        "format": "color",
                                                        "description": "Background color"
                                                    },
                                                    "fontWeight": {
                                                        "type": "string",
                                                        "enum": ["normal", "bold"],
                                                        "description": "Font weight (normal or bold)"
                                                    },
                                                    "fontStyle": {
                                                        "type": "string",
                                                        "enum": ["normal", "italic"],
                                                        "description": "Font style (normal or italic)"
                                                    },
                                                    "textDecoration": {
                                                        "type": "string",
                                                        "enum": ["none", "underline", "line-through", "overline"],
                                                        "description": "Text decoration"
                                                    },
                                                    "before": {
                                                        "type": "object",
                                                        "properties": {
                                                            "contentText": {
                                                                "type": "string",
                                                                "description": "Text to insert before the variable"
                                                            },
                                                            "color": {
                                                                "type": "string",
                                                                "format": "color",
                                                                "description": "Color of the before text"
                                                            }
                                                        }
                                                    },
                                                    "after": {
                                                        "type": "object",
                                                        "properties": {
                                                            "contentText": {
                                                                "type": "string",
                                                                "description": "Text to insert after the variable"
                                                            },
                                                            "color": {
                                                                "type": "string",
                                                                "format": "color",
                                                                "description": "Color of the after text"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "default": {
                                        "LOCS": "#ffffcc",
                                        "GLOS": "#ccffff"
                                    },
                                    "description": "Defines prefix styling for variable highlighting. Each key is a prefix (e.g., 'LOCS', 'GLOS') and each value can be either a color or an object with detailed styling options."
                                }
                            },
                            "description": "Settings for variable prefix highlighting"
                        },
                        "comment": {
                            "type": "object",
                            "properties": {
                                "patterns": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "oneOf": [
                                            {
                                                "type": "string",
                                                "format": "color",
                                                "description": "Simple color value"
                                            },
                                            {
                                                "type": "object",
                                                "properties": {
                                                    "color": {
                                                        "type": "string",
                                                        "format": "color",
                                                        "description": "Text color"
                                                    },
                                                    "backgroundColor": {
                                                        "type": "string",
                                                        "format": "color",
                                                        "description": "Background color"
                                                    },
                                                    "fontWeight": {
                                                        "type": "string",
                                                        "enum": ["normal", "bold"],
                                                        "description": "Font weight (normal or bold)"
                                                    },
                                                    "fontStyle": {
                                                        "type": "string",
                                                        "enum": ["normal", "italic"],
                                                        "description": "Font style (normal or italic)"
                                                    },
                                                    "textDecoration": {
                                                        "type": "string",
                                                        "enum": ["none", "underline", "line-through", "overline"],
                                                        "description": "Text decoration"
                                                    },
                                                    "before": {
                                                        "type": "object",
                                                        "properties": {
                                                            "contentText": {
                                                                "type": "string",
                                                                "description": "Text to insert before the comment"
                                                            },
                                                            "color": {
                                                                "type": "string",
                                                                "format": "color",
                                                                "description": "Color of the before text"
                                                            }
                                                        }
                                                    },
                                                    "after": {
                                                        "type": "object",
                                                        "properties": {
                                                            "contentText": {
                                                                "type": "string",
                                                                "description": "Text to insert after the comment"
                                                            },
                                                            "color": {
                                                                "type": "string",
                                                                "format": "color",
                                                                "description": "Color of the after text"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        ]
                                    },
                                    "default": {
                                        "TODO": {
                                            "color": "#ff8c00",
                                            "fontWeight": "bold"
                                        },
                                        "FIXME": {
                                            "color": "#ff0000",
                                            "fontWeight": "bold"
                                        }
                                    },
                                    "description": "Defines styling for comment lines that start with specific patterns (e.g., '! TODO', '! FIXME'). Each key is a pattern and each value can be either a color or an object with detailed styling options."
                                }
                            },
                            "description": "Settings for comment pattern highlighting"
                        }
                    }
                },
                "clarion.prefixHighlighting.enabled": {
                    "type": "boolean",
                    "default": true,
                    "description": "Enable or disable prefix highlighting for Clarion variables."
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run compile",
        "compile": "tsc -b",
        "watch": "tsc -b -w"
    },
    "devDependencies": {
        "@types/mocha": "^8.2.2",
        "@types/node": "^22.13.5",
        "@types/vscode": "^1.97.0",
        "@typescript-eslint/parser": "^8.25.0",
        "@vscode/test-electron": "^2.4.1",
        "eslint": "^9.21.0",
        "glob": "^11.0.1",
        "mocha": "^11.1.0",
        "rimraf": "^6.0.1",
        "typescript": "^4.2.4"
    },
    "dependencies": {
        "minimatch": "^10.0.1",
        "minimist": "^1.2.6",
        "mkdirp": "^3.0.1",
        "vscode-languageclient": "^7.0.0",
        "vscode-languageserver": "^7.0.0",
        "vscode-languageserver-protocol": "^3.17.5",
        "vscode-languageserver-textdocument": "^1.0.12",
        "xml2js": "^0.6.2"
    }
}